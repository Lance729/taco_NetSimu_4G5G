# how to run?
# opp_run -m -n .:../inet-4.5.4/examples:../inet-4.5.4/showcases:../inet-4.5.4/src:../inet-4.5.4/tests/validation:../inet-4.5.4/tests/networks:../inet-4.5.4/tutorials:../simu5g-1.3.0/emulation:../simu5g-1.3.0/simulations:../simu5g-1.3.0/src -x "inet.common.selfdoc;inet.emulation;inet.examples.emulation;inet.showcases.emulation;inet.showcases.visualizer.osg;inet.visualizer.osg;simu5g.simulations.LTE.cars;simu5g.simulations.NR.cars;simu5g.nodes.cars" --image-path=../inet-4.5.4/images:../simu5g-1.3.0/images -l ../inet-4.5.4/src/INET -l ../simu5g-1.3.0/src/simu5g run_LTE_network.ini


[General]
sim-time-limit=30s
warmup-period=0s
repeat = 1
**.routingRecorder.enabled = false

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${repetition}.vec
seed-set = 1024
**.vector-recording = true

################ Mobility parameters #####################
**.mobility.constraintAreaMaxX = 1000m
**.mobility.constraintAreaMaxY = 1000m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m

############### AMC MODULE PARAMETERS ###############
**.numBands = 50



############### Transmission Power ##################
**.uePower = 26dBm
**.eNodeBPower = 40dBm
**.targetBler = 0.01
**.blerShift = 5

############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")

# ----------------------------------------------------------------------------- #
# Config "SinglePair"
#
# Do NOT run this config! It serves as base configuration for "SinglePair-UDP-*" and "SinglePair-TCP-*" configurations (see below).
# It includes two UEs served by one eNodeB. UEs are far from the eNB (~50m), but close to each other (20m)
#
[Config SinglePair]
network = networks.LTE_SingleCell_D2D_without_core_network
description = "Do not run this config! It serves as base configuration."
### eNodeBs configuration ###
*.eNB.mobility.initFromDisplayString = false
*.eNB.mobility.initialX = 350m
*.eNB.mobility.initialY = 300m

### UEs configuration ###
*.numUeCell = 0
*.numUeD2DTx = 1
*.numUeD2DRx = 1

*.ue*[0].macCellId = 1
*.ue*[0].masterId = 1
*.ue*[0].mobility.initFromDisplayString = false

# # Place D2D endpoints far from the eNodeB (~50m) and close to each other (20m)
# *.ueD2DTx[0].mobility.initialX = 290m
# *.ueD2DTx[0].mobility.initialY = 350m
# *.ueD2DRx[0].mobility.initialX = 310m
# *.ueD2DRx[0].mobility.initialY = 350m


# --------------------------

[Config LTE_DL]
# 测试说明：我们进行了压力测试，无论设置间隔0.2ms还是2ms，包长为最大10K，吞吐量大概就是4,204,146 Bps ≈ 33.6332 Mbps，不会更大了。
network = networks.LTE_SingleCell
description = "Run for DL that UE downloads a video from a server."
**.ue[*].numApps = 1
**.server.numApps = 1

**.numUe = ${numUEs=1,2,5,10,20,50,100}


**.mobility.constraintAreaMinX = 300m
**.mobility.constraintAreaMinY = 200m

# 调整UE的位置
**.mobility.constraintAreaMaxX = 400m
**.mobility.constraintAreaMaxY = 450m

**.ue[*].masterId = 1
**.ue[*].macCellId = 1
**.ue[*].mobility.initFromDisplayString = false
**.ue[*].mobility.typename = "StationaryMobility"
**.ue[*].app[*].typename = "UdpVideoStreamClient" # 表示视频流的接收方
**.ue[*].app[*].serverAddress = "server"
**.ue[*].app[*].localPort = 9999
**.ue[*].app[*].serverPort = 3088
**.ue[*].app[*].startTime = uniform(0s, 0.02s)

**.server.app[*].typename = "UdpVideoStreamServer"

**.server.app[*].videoSize = 100MiB # 表示总共要发送的视频大小是 10 MiB（10 × 1024 × 1024 字节 = 10,485,760 字节）。模拟该服务器将视频分片为若干个 UDP 数据包，分批推送完这 10MiB 数据。模板里是10,我们曾试过100，但是没有显著改变吞吐量。packetLen的影响更大

**.server.app[*].localPort = 3088

**.server.app[*].sendInterval = 2ms # 这个默认是20，表示每隔 20 毫秒发送一个 UDP 包，直到全部 10MiB 数据发送完毕。数据传输的节奏控制参数，影响发送速率（频率越快 ➜ 吞吐量越大）,如果这个值很大->频率低->吞吐量下降.


#**.server.app[*].packetLen = ${packetLen = 100B, 200B, 300B, 400B, 500B, 600B, 700B, 800B, 900B, 1KiB, 1.5KiB, 2KiB, 5KiB }
**.server.app[*].packetLen = ${packetLen = 5500B } # 表示每个视频数据包是 packetLen 字节。2K的结果就是966,459 Bps ≈ 7.7317 Mbps;5K对应的Dl就是2,443,779 Bps ≈ 19.5502 Mbps;5.5K对应的是2,653,920 Bps ≈ 21.2314 Mbps，如果是6K就会2910151 ≈ 23.2812 Mbps

**.mtu = 10000B # MTU（Maximum Transmission Unit）是网络层（IP 层）一次能传输的最大数据长度。设置为 10000 字节意味着大于这个值的 UDP 数据包会被分片（fragment）；UDP 本身不做分片重组，所以推荐设置 packetLen 小于 MTU 避免 IP 层分片。如果 packetLen > mtu，比如 packetLen = 12KiB 时，IP 层会将数据包分成多片，容易造成丢包或性能下降；实际网络中常见 MTU 是 1500 字节（以太网），10000B 是实验环境中放宽限制.而且也是设备参数的限制，过大会让UDP报错。



[Config LTE_UL]

network = networks.LTE_SingleCell
description = "Run for UL that UE uploads data to a server."
sim-time-limit=50s

############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")


# # connect each UE to the eNB
*.ue[*].macCellId = 1
*.ue[*].masterId = 1
# *.ue[*].nrMacCellId = 1 # 中的 nr 代表 5G 新空口（New Radio），nrMacCellId 是 5G NR 网络的 MAC 层小区标识符
# *.ue[*].nrMasterId = 1 # 

**.mobility.initFromDisplayString = true # 表示从ned字符串中初始化位置，而不是随机生成
# ### eNodeBs configuration ###
# *.eNB.mobility.initialX = 300m
# *.eNB.mobility.initialY = 300m

# # UE position
# *.ue.mobility.initialX = 350m
# *.ue.mobility.initialY = 350m



# one UDP application for each user
*.ue[*].numApps = 1
# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps)
*.server.numApps = 1
#============= Application Setup =============
*.ue[*].app[*].typename = "VoIPSender" #CbrSender， BurstSender, VoIPSender,TcpAppClient
*.ue[*].app[*].packetSize =  ${27000byte} # 不看app层，而是lrc物理层的真实传输，27KB产出mean=947732Bps=7.58Mbps
*.ue[*].app[*].destAddress = "server"
*.ue[*].app[*].destPort = 3000+ancestorIndex(1)
*.ue[*].app[*].localPort = 3088
*.ue[*].app[*].startTime = uniform(0s,0.02s)

# *.ue[*].app[*].sendInterval = truncnormal(0.02s, 0.005s) # 平均20ms，带扰动

*.server.app[*].typename = "VoIPReceiver" # CbrReceiver, BurstReceiver,VoIPReceiver,TcpAppServer
*.server.app[*].localPort = 3000+ancestorIndex(0)
#------------------------------------#
